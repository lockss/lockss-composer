#!/bin/bash
#
# Copyright (c) 2019 Board of Trustees of Leland Stanford Jr. University,
# all rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of Stanford University shall not
# be used in advertising or otherwise to promote the sale, use or other dealings
# in this Software without prior written authorization from Stanford University.
#

usage() {
  echo "Compose a single LAAWS service from several."
  echo "Usage: $0 [-options] profile"
  echo "profile is the name of the set of services to be composed"
  echo "Options:"
  echo "  -o <dir> The output directory. Default 'profile-composed'"
  echo "  -p       Preserve temporary local files on exit"
}

# Remove the output directory.
cleanup_output() {
  if [ -n $output_dir ]; then
    echo $0: Remove files from output directory $output_dir
    /bin/rm -rf $output_dir
  fi
}

# Remove the output and temporary directories, if necessary.
cleanup() {
  cleanup_output

  while read -u3 service_name; do
    # Cleanup of the code of this service, if necessary.
    if [ -z $preserve ]; then
      # Get the base name of the service.
      base_service_name=$(basename ${service_name})
      echo $0: Remove $base_service_name local files before exit
      /bin/rm -rf $base_service_name
    fi
  done 3< ${compose_profile}/services

  exit
}

output_dir=
preserve=
compose_profile=

# Clean up if script is interrupted.
trap "cleanup" SIGINT SIGTERM 1

# Process command line options.
while [ -n "$1" ]; do
  case "$1" in
    "-o" )
      output_dir="$2"
      shift; shift; continue;;
    "-p" )
      preserve="true"
      shift; continue;;
    -h )
      usage
      exit 0;;
    * )
      compose_profile="$1"
      shift; continue;;
  esac
  break;
done

if [ -z $output_dir ]; then
  output_dir=${compose_profile}-composed
fi

echo $0: Output directory is $output_dir

if [ -z $preserve ]; then
  echo $0: Temporary local files will not be preserved
else
  echo $0: Temporary local files will be preserved
fi

echo $0: Compose profile is $compose_profile

# Reset the contents of the output directory.
cleanup_output
/bin/mkdir ${output_dir}

# Loop through all the services to be composed.
while read -u3 service_name; do
  echo $0: Start of processing of service $service_name

  # Get the base name of the service.
  base_service_name=$(basename ${service_name})

  # Check whether the service name is really a path.
  if [ "$service_name" != "$base_service_name" ]; then
    # Yes: Check that the service exists.
    if [ -d $service_name ]; then
      # Yes: Make a local copy the existing service.
      echo $0: Make a copy of the service $service_name 
      /bin/cp -r ${service_name} ${base_service_name}

      # Reset the service name to point to the local copy.
      #service_name=$base_service_name

      # Clean the service.
      echo $0: Clean service $base_service_name
      mvn -f ${base_service_name}/pom.xml clean
    else
      # No: Skip the service because it does not exist.
      echo $0: Service $service_name does not exist. Skipping...
    fi
  else
    # Get a clean copy of the service to be composed.
    echo $0: Remove any previously existing $base_service_name local files
    /bin/rm -rf $base_service_name
    echo $0: Get a copy of the $base_service_name service files from the repository
    git clone -b develop https://github.com/lockss/${base_service_name}.git
  fi

  # Check that there is a service to be processed.
  if [ -d $base_service_name ]; then
    # Yes: Generate the service code.
    echo $0: Generate sources of the $base_service_name service
    mvn -f ${base_service_name}/pom.xml generate-sources

    # Remove service conflicting files.
    echo $0: Remove conflicting local files from the $base_service_name service
    /bin/rm -rf ${base_service_name}/src/generated/java/org/lockss/laaws/*/config
    /bin/rm -rf ${base_service_name}/src/main/java/org/lockss/laaws/*/security
    /bin/rm -f ${base_service_name}/src/main/java/org/lockss/laaws/*/*Application.java
    /bin/rm -rf ${base_service_name}/src/main/resources/swagger

    if [ -n "$(/bin/ls ${output_dir}/src/generated/java/org/lockss/laaws/*/api/StatusApi.java 2> /dev/null)" ]; then
      echo $0: Remove duplicate Status API local files from the $base_service_name service
      /bin/rm -f ${base_service_name}/src/generated/java/org/lockss/laaws/*/api/StatusApi*.java
      /bin/rm -f ${base_service_name}/src/main/java/org/lockss/laaws/*/impl/StatusApi*.java
      /bin/rm -f ${base_service_name}/src/test/java/org/lockss/laaws/*/impl/TestStatusApi*.java
    fi

    # Copy the service source code files to the output.
    echo $0: Copy source files from the $base_service_name service to output directory $output_dir
    /bin/cp -r ${base_service_name}/src ${output_dir}

    # Copy the service test files to the output.
    if [ -d ${base_service_name}/test ]; then
      echo $0: Copy test files from the $base_service_name service to output directory $output_dir
      /bin/cp -r ${base_service_name}/test ${output_dir}
    fi

    # Cleanup of the code of this service, if necessary.
    if [ -z $preserve ]; then
      echo $0: Remove $base_service_name local files
      /bin/rm -rf ${base_service_name}
    fi

    echo $0: End of processing of service $service_name
  fi
done 3< ${compose_profile}/services

# Copy the profile configuration files to the output.
/bin/cp -r ${compose_profile}/config ${output_dir}

# Copy the profile docker files to the output.
/bin/cp -r ${compose_profile}/docker ${output_dir}

# Copy the profile Docker configuration file to the output.
/bin/cp ${compose_profile}/Dockerfile ${output_dir}

# Copy the profile maven configuration file to the output.
/bin/cp ${compose_profile}/pom.xml ${output_dir}

# Overlay the profile source code files to the output.
/bin/cp -r ${compose_profile}/src ${output_dir}

# Overlay the profile test files to the output.
/bin/cp -r ${compose_profile}/test ${output_dir}

# Install the JAR just built with all the dependencies.
mvn install -f ${output_dir}/pom.xml -DskipGitProperties=true -DskipSwaggerPostprocess=true -DskipSwagger=true -DskipTests=true
